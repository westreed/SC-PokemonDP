import dataTable as dT;


function divideType(type){
    var type1 = 0; var type2 = 0;
    while(type >= 16){type -= 16; type2 += 1;}
    type1 = type;
    return type1, type2;
}

//합쳐진 능력치를 4개의 스탯으로 나누는 함수
function divideStats(st){
    var hp = 0; var atk = 0;
    var amr = 0; var spd = 0;
    while(16777216 <= st){st -= 16777216; spd += 1;}
    while(65536 <= st){st -= 65536; amr += 1;}
    while(256 <= st){st -= 256; atk += 1;}
    hp = st;
    return hp, atk, amr, spd;
}

function returnStatsHP(st){
    return st & 0xFF;
}

function returnIVsHP(st){
    return st & 0x1F;
}

//4개의 스탯을 1개의 합쳐진 능력치로 바꾸는 함수
function combineStats(hp, atk, amr, spd){
    return hp + atk*256 + amr*65536 + spd*16777216;
}

//합쳐진 능력치를 4개의 스탯으로 나누는 함수
function divideIVs(st){
    var hp = 0; var atk = 0;
    var amr = 0; var spd = 0;
    while(32768 <= st){st -= 32768; spd += 1;}
    while(1024 <= st){st -= 1024; amr += 1;}
    while(32 <= st){st -= 32; atk += 1;}
    hp = st;
    return hp, atk, amr, spd;
}

//4개의 스탯을 1개의 합쳐진 능력치로 바꾸는 함수
function combineIVs(hp, atk, amr, spd){
    return hp + atk*32 + amr*1024 + spd*32768;
}

//0~31 범위의 랜덤한 값을 생성하는 함수
function rand32(){
    var rd = 0;
    foreach(i : py_range(5)){SetSwitch(i+250, Random);}
    if(Switch(250, Set)){rd += 1;}
    if(Switch(251, Set)){rd += 2;}
    if(Switch(252, Set)){rd += 4;}
    if(Switch(253, Set)){rd += 8;}
    if(Switch(254, Set)){rd += 16;}
    return rd;
}

//개체값 생성 - 제일 좋은 개체값은 1048575
function createIVs(){
    var IVs = 0;
    foreach(i : py_range(4)){
        const rd = rand32();
        IVs += rd*dT.n32[i];
    }
    return IVs;
}

function divideData256(value){
    var type1 = 0; var type2 = 0;
    while(value >= 256){value -= 256; type2 += 1;}
    type1 = value;
    return type1, type2;
}

function returnHitPoints(cp, level, hp, vhp){
    //=ROUNDDOWN((((hp*10)+vhp*3)*level/100)+10+level, 0)
    return (((20*hp)+5*vhp)*level/100)+50+level;
}

function returnAttacks(cp, level, atk, vatk){
    //=ROUNDDOWN(((atk*2)+vatk)*level/100+5,0)
    return (((2*atk)+vatk)*level/100)+5;
}

function returnArmor(cp, level, amr, vamr){
    //=ROUNDDOWN((D2+D3)*G2/100,0)
    return (amr+vamr)*level/100;
}

function returnSpeed(cp, level, spd, vspd){
    //=ROUNDDOWN(E2,0)+ROUNDDOWN((E3-1)/2,0)+ROUNDDOWN(G2/5,0)
    return spd+((vspd-1)/2)+(level/5);
}

function settingSpeed(spd){
    if(spd <= 12) return 0;
    return (spd-5)/8;
}

//type:야생?트레이너? exp:개체경험치 lucky:cp의포켓몬이 행운의알을 들고 있는가? level:상대레벨
function returnEXP(type, exp, lucky, level){
    var type2 = 1;
    if(type == 0){type2 = 2;}
    return (type2*exp*lucky*level)/7;
}

function returnVersion(ver){
    var ver1 = 0; var ver2 = 0; var ver3 = 0;
    while(ver >= 100){ver -= 100; ver1 += 1;}
    while(ver >= 10){ver -= 10; ver2 +=1;}
    ver3 = ver;
    return ver1, ver2, ver3;
}

function dividePos(pos){
    var pos_x = 0; var pos_y = 0;
    while(pos >= 8192){pos -= 8192; pos_y += 1;}
    pos_x = pos;
    return pos_x, pos_y;
}

function retrunCatchRate(cp, curHP, maxHP, ball, catch){
    if(ball == 5){return 256;}
    const maxHP3 = 3*maxHP;
    return ((maxHP3-(2*curHP))*ball*catch)/(2*maxHP3);
}

function returnEvoTarget(unit){
    if(unit < 256){return unit;}
    const unitArray = EUDArray(2);
    unitArray[0],unitArray[1] = divideData256(unit);
    return unitArray[dwrand() % 2]; //둘중 하나 랜덤으로 반환하기
}