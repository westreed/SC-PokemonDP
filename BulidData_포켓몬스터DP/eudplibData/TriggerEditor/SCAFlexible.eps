import scaVariable as n0;

const ws = Db(2528);//workspace
const EntryPointLength = 8;//EntryPointLength
const SpaceLength = 300;//DataBufferSize
const ObjectCount = 16;//ObjectCount

function Init(){
    MPQAddFile('SCARCHIVEMAPCODE', py_open('scakeyfile', 'rb').read());
    MPQAddFile('SCARCHIVEDATA', py_open('scadatafile', 'rb').read());
    //EntryPoint
    dwwrite_epd(EPD(ws) + 0, 668204455);
    dwwrite_epd(EPD(ws) + 1, 2269720572);
    dwwrite_epd(EPD(ws) + 2, 2669785136);
    dwwrite_epd(EPD(ws) + 3, 1527695344);
    dwwrite_epd(EPD(ws) + 4, 3688375605);
    dwwrite_epd(EPD(ws) + 5, 1153944894);
    dwwrite_epd(EPD(ws) + 6, 2201106623);
    dwwrite_epd(EPD(ws) + 7, 2284943862);
    
}


function Exec(){
    Init();
}


function ResetValue(tagNum, index){
    const cp = getcurpl();
    switch(tagNum){
    case 0:
    {
        n0.scaMain[cp] = 0;
        break;
    }
    case 1:
    {
        const alen = n0.scaSub.length / 8;
        for(var i = 0 ; i < alen; i++){
            n0.scaSub[alen * cp + i] = 0;
        }
        break;
    }
    case 2:
    {
        const alen = n0.scaTrainer.length / 8;
        for(var i = 0 ; i < alen; i++){
            n0.scaTrainer[alen * cp + i] = 0;
        }
        break;
    }
    case 3:
    {
        const alen = n0.scaPokemonIL.length / 8;
        for(var i = 0 ; i < alen; i++){
            n0.scaPokemonIL[alen * cp + i] = 0;
        }
        break;
    }
    case 4:
    {
        const alen = n0.scaPokemonHP.length / 8;
        for(var i = 0 ; i < alen; i++){
            n0.scaPokemonHP[alen * cp + i] = 0;
        }
        break;
    }
    case 5:
    {
        const alen = n0.scaPokemonIVs.length / 8;
        for(var i = 0 ; i < alen; i++){
            n0.scaPokemonIVs[alen * cp + i] = 0;
        }
        break;
    }
    case 6:
    {
        const alen = n0.scaPokemonEXP.length / 8;
        for(var i = 0 ; i < alen; i++){
            n0.scaPokemonEXP[alen * cp + i] = 0;
        }
        break;
    }
    case 7:
    {
        const alen = n0.scaPokemonIS.length / 8;
        for(var i = 0 ; i < alen; i++){
            n0.scaPokemonIS[alen * cp + i] = 0;
        }
        break;
    }
    case 8:
    {
        const alen = n0.scaBag.length / 8;
        for(var i = 0 ; i < alen; i++){
            n0.scaBag[alen * cp + i] = 0;
        }
        break;
    }
    case 9:
    {
        const alen = n0.scaBook.length / 8;
        for(var i = 0 ; i < alen; i++){
            n0.scaBook[alen * cp + i] = 0;
        }
        break;
    }
    case 10:
    {
        n0.scaLocation[cp] = 0;
        break;
    }
    case 11:
    {
        n0.scaPosition[cp] = 0;
        break;
    }
    case 12:
    {
        n0.scaPlaytime[cp] = 0;
        break;
    }
    case 13:
    {
        n0.scaOption[cp] = 0;
        break;
    }
    case 14:
    {
        n0.scaStarting[cp] = 0;
        break;
    }
    case 15:
    {
        n0.scaBookNum[cp] = 0;
        break;
    }
    }
}


function SaveValue(tagNum, Value, index){
    const cp = getcurpl();
    switch(tagNum){
    case 0:
    {
        n0.scaMain[cp] = Value;
        break;
    }
    case 1:
    {
        const alen = n0.scaSub.length / 8;
        n0.scaSub[alen * cp + index] = Value;
        break;
    }
    case 2:
    {
        const alen = n0.scaTrainer.length / 8;
        n0.scaTrainer[alen * cp + index] = Value;
        break;
    }
    case 3:
    {
        const alen = n0.scaPokemonIL.length / 8;
        n0.scaPokemonIL[alen * cp + index] = Value;
        break;
    }
    case 4:
    {
        const alen = n0.scaPokemonHP.length / 8;
        n0.scaPokemonHP[alen * cp + index] = Value;
        break;
    }
    case 5:
    {
        const alen = n0.scaPokemonIVs.length / 8;
        n0.scaPokemonIVs[alen * cp + index] = Value;
        break;
    }
    case 6:
    {
        const alen = n0.scaPokemonEXP.length / 8;
        n0.scaPokemonEXP[alen * cp + index] = Value;
        break;
    }
    case 7:
    {
        const alen = n0.scaPokemonIS.length / 8;
        n0.scaPokemonIS[alen * cp + index] = Value;
        break;
    }
    case 8:
    {
        const alen = n0.scaBag.length / 8;
        n0.scaBag[alen * cp + index] = Value;
        break;
    }
    case 9:
    {
        const alen = n0.scaBook.length / 8;
        n0.scaBook[alen * cp + index] = Value;
        break;
    }
    case 10:
    {
        n0.scaLocation[cp] = Value;
        break;
    }
    case 11:
    {
        n0.scaPosition[cp] = Value;
        break;
    }
    case 12:
    {
        n0.scaPlaytime[cp] = Value;
        break;
    }
    case 13:
    {
        n0.scaOption[cp] = Value;
        break;
    }
    case 14:
    {
        n0.scaStarting[cp] = Value;
        break;
    }
    case 15:
    {
        n0.scaBookNum[cp] = Value;
        break;
    }
    }
}


function SaveDataWriteValue(tagNum, BaseAddress, index){
    const cp = getcurpl();
    var rvalue = 0;
    switch(tagNum){
    case 0:
        {
        const objValue = n0.scaMain[cp];
        rvalue += objValue;
        if(objValue != 0){
            if (objValue > 0xFFFF){
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                index++;
             }else{
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                index++;
             }
         }
        }
        break;
    case 1:
        {
        const alen = n0.scaSub.length / 8;
        for(var i = 0 ; i < alen ; i ++){
            const objValue = n0.scaSub[alen * cp + i];
            rvalue += objValue;
            if(objValue != 0){
                if (objValue > 0xFFFF){
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x3000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                    index++;
                 }else{
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x4000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                    index++;
                 }
            }
        }
        }
        break;
    case 2:
        {
        const alen = n0.scaTrainer.length / 8;
        for(var i = 0 ; i < alen ; i ++){
            const objValue = n0.scaTrainer[alen * cp + i];
            rvalue += objValue;
            if(objValue != 0){
                if (objValue > 0xFFFF){
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x3000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                    index++;
                 }else{
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x4000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                    index++;
                 }
            }
        }
        }
        break;
    case 3:
        {
        const alen = n0.scaPokemonIL.length / 8;
        for(var i = 0 ; i < alen ; i ++){
            const objValue = n0.scaPokemonIL[alen * cp + i];
            rvalue += objValue;
            if(objValue != 0){
                if (objValue > 0xFFFF){
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x3000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                    index++;
                 }else{
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x4000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                    index++;
                 }
            }
        }
        }
        break;
    case 4:
        {
        const alen = n0.scaPokemonHP.length / 8;
        for(var i = 0 ; i < alen ; i ++){
            const objValue = n0.scaPokemonHP[alen * cp + i];
            rvalue += objValue;
            if(objValue != 0){
                if (objValue > 0xFFFF){
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x3000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                    index++;
                 }else{
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x4000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                    index++;
                 }
            }
        }
        }
        break;
    case 5:
        {
        const alen = n0.scaPokemonIVs.length / 8;
        for(var i = 0 ; i < alen ; i ++){
            const objValue = n0.scaPokemonIVs[alen * cp + i];
            rvalue += objValue;
            if(objValue != 0){
                if (objValue > 0xFFFF){
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x3000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                    index++;
                 }else{
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x4000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                    index++;
                 }
            }
        }
        }
        break;
    case 6:
        {
        const alen = n0.scaPokemonEXP.length / 8;
        for(var i = 0 ; i < alen ; i ++){
            const objValue = n0.scaPokemonEXP[alen * cp + i];
            rvalue += objValue;
            if(objValue != 0){
                if (objValue > 0xFFFF){
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x3000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                    index++;
                 }else{
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x4000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                    index++;
                 }
            }
        }
        }
        break;
    case 7:
        {
        const alen = n0.scaPokemonIS.length / 8;
        for(var i = 0 ; i < alen ; i ++){
            const objValue = n0.scaPokemonIS[alen * cp + i];
            rvalue += objValue;
            if(objValue != 0){
                if (objValue > 0xFFFF){
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x3000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                    index++;
                 }else{
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x4000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                    index++;
                 }
            }
        }
        }
        break;
    case 8:
        {
        const alen = n0.scaBag.length / 8;
        for(var i = 0 ; i < alen ; i ++){
            const objValue = n0.scaBag[alen * cp + i];
            rvalue += objValue;
            if(objValue != 0){
                if (objValue > 0xFFFF){
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x3000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                    index++;
                 }else{
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x4000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                    index++;
                 }
            }
        }
        }
        break;
    case 9:
        {
        const alen = n0.scaBook.length / 8;
        for(var i = 0 ; i < alen ; i ++){
            const objValue = n0.scaBook[alen * cp + i];
            rvalue += objValue;
            if(objValue != 0){
                if (objValue > 0xFFFF){
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x3000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                    index++;
                 }else{
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x4000 + tagNum);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, i);
                    index++;
                    wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                    index++;
                 }
            }
        }
        }
        break;
    case 10:
        {
        const objValue = n0.scaLocation[cp];
        rvalue += objValue;
        if(objValue != 0){
            if (objValue > 0xFFFF){
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                index++;
             }else{
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                index++;
             }
         }
        }
        break;
    case 11:
        {
        const objValue = n0.scaPosition[cp];
        rvalue += objValue;
        if(objValue != 0){
            if (objValue > 0xFFFF){
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                index++;
             }else{
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                index++;
             }
         }
        }
        break;
    case 12:
        {
        const objValue = n0.scaPlaytime[cp];
        rvalue += objValue;
        if(objValue != 0){
            if (objValue > 0xFFFF){
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                index++;
             }else{
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                index++;
             }
         }
        }
        break;
    case 13:
        {
        const objValue = n0.scaOption[cp];
        rvalue += objValue;
        if(objValue != 0){
            if (objValue > 0xFFFF){
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                index++;
             }else{
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                index++;
             }
         }
        }
        break;
    case 14:
        {
        const objValue = n0.scaStarting[cp];
        rvalue += objValue;
        if(objValue != 0){
            if (objValue > 0xFFFF){
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                index++;
             }else{
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                index++;
             }
         }
        }
        break;
    case 15:
        {
        const objValue = n0.scaBookNum[cp];
        rvalue += objValue;
        if(objValue != 0){
            if (objValue > 0xFFFF){
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x1000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue / 0x10000);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue % 0x10000);
                index++;
             }else{
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, 0x2000 + tagNum);
                index++;
                wwrite_epd(BaseAddress + index / 2, (index % 2) * 2, objValue);
                index++;
             }
         }
        }
        break;
    }
    
    return index, rvalue;
}


function LoadDataReadValue(BaseAddress, i){
   	const indicator = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   	
   	if (indicator != 0){
   		const spec = indicator / 0x1000;
   		const ObjNum = indicator % 0x1000;
   		var vindex = 0;
   		var value = 0;
   		if (spec == 1){
   			//4바이트 지정
   			i++;
   			const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   			i++;
   			const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   			value = value1 * 0x10000 + value2;
   		}else if (spec == 2){
   			//2바이트 지정
   			i++;
   			value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   		}else if (spec == 3){
   			//4바이트 지정
   			i++;
   			vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   			i++;
   			const value1 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   			i++;
   			const value2 = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   			value = value1 * 0x10000 + value2;
   		}else if (spec == 4){
   			//2바이트 지정
   			i++;
   			vindex = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   			i++;
   			value = wread_epd(BaseAddress + i / 2, (i % 2) * 2);
   		}
   		SaveValue(ObjNum, value, vindex);
   	}
   	return i;
}
