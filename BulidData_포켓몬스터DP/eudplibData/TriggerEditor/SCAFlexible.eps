import scaVariable as n0;

const ws = Db(4128);  // workspace
const EntryPointLength = 8;  // EntryPointLength
const SpaceLength = 500;  // DataBufferSize
const ObjectCount = 14;  // ObjectCount

function Init() {
    MPQAddFile('SCARCHIVEMAPCODE', py_open('scakeyfile', 'rb').read());
    MPQAddFile('SCARCHIVEDATA', py_open('scadatafile', 'rb').read());
    DoActions(list(  // EntryPoint
        SetMemory(ws + 0, SetTo, 2664562750),
        SetMemory(ws + 4, SetTo, 3642039576),
        SetMemory(ws + 8, SetTo, 855753102),
        SetMemory(ws + 12, SetTo, 2712141033),
        SetMemory(ws + 16, SetTo, 2408394549),
        SetMemory(ws + 20, SetTo, 2671453214),
        SetMemory(ws + 24, SetTo, 2569525077),
        SetMemory(ws + 28, SetTo, 4029909184),
    ));
}

function Exec() {
    Init();
}

function ResetValue(tagNum, index) {
    const cp = getcurpl();
    const ResetArray = function(alen, epd) {
        for (var i = 0 ; i < alen ; i++) {
            dwwrite_epd(epd + i, 0);
        }
    };
    switch (tagNum) {
    case 0: {
        n0.scaMain[cp] = 0;
        break; }
    case 1: {
        const alen = n0.scaSub.length / 8;
        const aepd = alen * cp + EPD(n0.scaSub);
        ResetArray(alen, aepd);
        break; }
    case 2: {
        const alen = n0.scaPokemonIL.length / 8;
        const aepd = alen * cp + EPD(n0.scaPokemonIL);
        ResetArray(alen, aepd);
        break; }
    case 3: {
        const alen = n0.scaPokemonHP.length / 8;
        const aepd = alen * cp + EPD(n0.scaPokemonHP);
        ResetArray(alen, aepd);
        break; }
    case 4: {
        const alen = n0.scaPokemonIVs.length / 8;
        const aepd = alen * cp + EPD(n0.scaPokemonIVs);
        ResetArray(alen, aepd);
        break; }
    case 5: {
        const alen = n0.scaPokemonEXP.length / 8;
        const aepd = alen * cp + EPD(n0.scaPokemonEXP);
        ResetArray(alen, aepd);
        break; }
    case 6: {
        const alen = n0.scaBag.length / 8;
        const aepd = alen * cp + EPD(n0.scaBag);
        ResetArray(alen, aepd);
        break; }
    case 7: {
        const alen = n0.scaBook.length / 8;
        const aepd = alen * cp + EPD(n0.scaBook);
        ResetArray(alen, aepd);
        break; }
    case 8: {
        n0.scaLocation[cp] = 0;
        break; }
    case 9: {
        n0.scaPosition[cp] = 0;
        break; }
    case 10: {
        n0.scaPlaytime[cp] = 0;
        break; }
    case 11: {
        n0.scaOption[cp] = 0;
        break; }
    case 12: {
        n0.scaStarting[cp] = 0;
        break; }
    case 13: {
        n0.scaBookNum[cp] = 0;
        break; }
    }
}

function SaveValue(tagNum, Value, index) {
    const cp = getcurpl();
    switch (tagNum) {
    case 0: {
        n0.scaMain[cp] = Value;
        break; }
    case 1: {
        const alen = n0.scaSub.length / 8;
        n0.scaSub[alen * cp + index] = Value;
        break; }
    case 2: {
        const alen = n0.scaPokemonIL.length / 8;
        n0.scaPokemonIL[alen * cp + index] = Value;
        break; }
    case 3: {
        const alen = n0.scaPokemonHP.length / 8;
        n0.scaPokemonHP[alen * cp + index] = Value;
        break; }
    case 4: {
        const alen = n0.scaPokemonIVs.length / 8;
        n0.scaPokemonIVs[alen * cp + index] = Value;
        break; }
    case 5: {
        const alen = n0.scaPokemonEXP.length / 8;
        n0.scaPokemonEXP[alen * cp + index] = Value;
        break; }
    case 6: {
        const alen = n0.scaBag.length / 8;
        n0.scaBag[alen * cp + index] = Value;
        break; }
    case 7: {
        const alen = n0.scaBook.length / 8;
        n0.scaBook[alen * cp + index] = Value;
        break; }
    case 8: {
        n0.scaLocation[cp] = Value;
        break; }
    case 9: {
        n0.scaPosition[cp] = Value;
        break; }
    case 10: {
        n0.scaPlaytime[cp] = Value;
        break; }
    case 11: {
        n0.scaOption[cp] = Value;
        break; }
    case 12: {
        n0.scaStarting[cp] = Value;
        break; }
    case 13: {
        n0.scaBookNum[cp] = Value;
        break; }
    }
}

function SaveDataWriteValue(tagNum, BaseAddress, index) {
    const cp = getcurpl();
    const indexQ = BaseAddress + index / 2;
    var indexR, rvalue = 0, 0;
    Trigger(index.ExactlyX(1, 1), indexR.SetNumber(2));
    const AdvanceIndex = function() {
        SetVariables(list(index, indexR), list(1, 2), list(Add, Add));
        Trigger(indexR.AtLeast(4), list(indexR.SetNumber(0), indexQ.AddNumber(1)));
    };

    const SaveArray = function(alen, epd) {
        for (var i = 0 ; i < alen ; i++) {
            const objValue = dwread_epd(epd + i);
            EUDContinueIf(objValue == 0);
            rvalue += objValue;
            if (objValue > 0xFFFF) {
                wwrite_epd(indexQ, indexR, 0x3000 + tagNum);
                AdvanceIndex();
                wwrite_epd(indexQ, indexR, i);
                AdvanceIndex();
                const objQ, objR = div(objValue, 0x10000);
                wwrite_epd(indexQ, indexR, objQ);
                AdvanceIndex();
                wwrite_epd(indexQ, indexR, objR);
                AdvanceIndex();
            } else {
                wwrite_epd(indexQ, indexR, 0x4000 + tagNum);
                AdvanceIndex();
                wwrite_epd(indexQ, indexR, i);
                AdvanceIndex();
                wwrite_epd(indexQ, indexR, objValue);
                AdvanceIndex();
            }
        }
    };

    const SaveDCV = function(objValue) {
        if (objValue == 0) return;
        rvalue += objValue;
        if (objValue > 0xFFFF) {
            wwrite_epd(indexQ, indexR, 0x1000 + tagNum);
            AdvanceIndex();
            const objQ, objR = div(objValue, 0x10000);
            wwrite_epd(indexQ, indexR, objQ);
            AdvanceIndex();
            wwrite_epd(indexQ, indexR, objR);
            AdvanceIndex();
        } else {
            wwrite_epd(indexQ, indexR, 0x2000 + tagNum);
            AdvanceIndex();
            wwrite_epd(indexQ, indexR, objValue);
            AdvanceIndex();
         }
    };

    switch (tagNum) {
    case 0: {
        const objValue = n0.scaMain[cp];
        SaveDCV(objValue);
        break; }
    case 1: {
        const alen = n0.scaSub.length / 8;
        SaveArray(alen, alen * cp + EPD(n0.scaSub));
        break; }
    case 2: {
        const alen = n0.scaPokemonIL.length / 8;
        SaveArray(alen, alen * cp + EPD(n0.scaPokemonIL));
        break; }
    case 3: {
        const alen = n0.scaPokemonHP.length / 8;
        SaveArray(alen, alen * cp + EPD(n0.scaPokemonHP));
        break; }
    case 4: {
        const alen = n0.scaPokemonIVs.length / 8;
        SaveArray(alen, alen * cp + EPD(n0.scaPokemonIVs));
        break; }
    case 5: {
        const alen = n0.scaPokemonEXP.length / 8;
        SaveArray(alen, alen * cp + EPD(n0.scaPokemonEXP));
        break; }
    case 6: {
        const alen = n0.scaBag.length / 8;
        SaveArray(alen, alen * cp + EPD(n0.scaBag));
        break; }
    case 7: {
        const alen = n0.scaBook.length / 8;
        SaveArray(alen, alen * cp + EPD(n0.scaBook));
        break; }
    case 8: {
        const objValue = n0.scaLocation[cp];
        SaveDCV(objValue);
        break; }
    case 9: {
        const objValue = n0.scaPosition[cp];
        SaveDCV(objValue);
        break; }
    case 10: {
        const objValue = n0.scaPlaytime[cp];
        SaveDCV(objValue);
        break; }
    case 11: {
        const objValue = n0.scaOption[cp];
        SaveDCV(objValue);
        break; }
    case 12: {
        const objValue = n0.scaStarting[cp];
        SaveDCV(objValue);
        break; }
    case 13: {
        const objValue = n0.scaBookNum[cp];
        SaveDCV(objValue);
        break; }
    }
    return index, rvalue;
}

function LoadDataReadValue(BaseAddress, i) {
    const iQ = BaseAddress + i / 2;
    var iR = 0;
    Trigger(i.ExactlyX(1, 1), iR.SetNumber(2));
    const AdvanceI = function() {
        SetVariables(list(i, iR), list(1, 2), list(Add, Add));
        Trigger(iR.AtLeast(4), list(iR.SetNumber(0), iQ.AddNumber(1)));
    };
    const indicator = wread_epd(iQ, iR);
    if (indicator == 0) return i;
    AdvanceI();
    const spec, ObjNum = div(indicator, 0x1000);
    var vindex = 0;
    var value;
    if (spec == 1) {  // 4바이트 지정
        const value1 = wread_epd(iQ, iR);
        AdvanceI();
        const value2 = wread_epd(iQ, iR);
        value = value1 * 0x10000 + value2;
    } else if (spec == 2) {  // 2바이트 지정
        value = wread_epd(iQ, iR);
    } else if (spec == 3) {  // 4바이트 지정
        vindex = wread_epd(iQ, iR);
        AdvanceI();
        const value1 = wread_epd(iQ, iR);
        AdvanceI();
        const value2 = wread_epd(iQ, iR);
        value = value1 * 0x10000 + value2;
    } else if (spec == 4) {  //2바이트 지정
        vindex = wread_epd(iQ, iR);
        AdvanceI();
        value = wread_epd(iQ, iR);
    }
    SaveValue(ObjNum, value, vindex);
    return i;
}
