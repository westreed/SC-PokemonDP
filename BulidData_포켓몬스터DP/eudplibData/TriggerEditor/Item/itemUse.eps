import Battle.battleStart as bbs;
import Battle.battleGUI as bbg;
import Interface.menu_Bag as imb;
import Interface.menu_Pokemon as imp;
import Interface.userGUI as iug;
import Item.itemInfo as iif;
import Pokemon.calculateMethod as pcm;
import Pokemon.pokemonInfo as ppi;
import Pokemon.myPokemon as pmp;
import Pokemon.pokemonStatus as ppst;
import Player.playerSetting as pps;
import Variables.etcData as ved;
import Variables.locationInfo as vli;
import TriggerEditor.timeline as tl;
import functions as fc;

const s = StringBuffer(1024);
const throwBall     = PVariable();
const throwNum      = PVariable();
const throwValue    = PVariable(); //포켓몬볼 값

//포켓몬에게 줄 수 있는 타입들
function isPokemonItem(type){
    if(type == 0 || type == 1 || type == 5 || type == 6 || type == 7 || type == 9 || type == 10){return true;}
    return false;
}

//일반 가방에서 사용할 수 있는 타입
function isBagType(type){
    if(
        type == 0 || type == 1 || type == 3 || type == 4 || type == 5 ||
        type == 6 || type == 7 || type == 9 || type == 10 || type == 11
    ){
        return true;
    }
    return false;
}

//전투중에 사용할 수 있는 타입들 (보통 배틀상황 같이 특정 상황에서만 활성화)
function isBattleType(type, battleType){
    //야생배틀에서만 사용할 수 있는 아이템
    if(type == 2){
        if(bbs.isWild(battleType)){return true;}
        else{return false;}
    }
    else if(type == 4 || type == 5 || type == 7 || type == 11){return true;}
    return false;
}

//state 0:가방 1:배틀
function item_useFunction(cp, bagSelect, pokemonSelect){
    const cpPk  = cp*pmp.userPokemonNum;
    const mpk   = pmp.myPokemon.cast(pmp.playerPokemonList[cpPk+pokemonSelect]);
    if(mpk.index == 0){return false;}
    const state     = pps.battleState[cp]; //0:false 1:true
    const itemIndex = imb.bagItemList[bagSelect]-1;
    const itemNum   = imb.bagNumList[bagSelect];
    const it        = iif.Item.cast(iif.itemList[itemIndex]);
    const pk        = ppi.Pokemon1.cast(ppi.pokemonList[mpk.index-1]);

    //진화의돌
    const itType = it.type;
    if(itType == 0){
        //해당 포켓몬에게 맞는 진화의돌인지 판단하기
        if(pmp.evolvePokemon(cp, pokemonSelect, it.index, 2)){
            //포켓몬과 알맞는 진화의 돌인 경우
            imb.subItem(cp, itemIndex, 1); //아이템 1개 제거
            iug.subMiniMenu[cp] = 0;
        }
        else{
            //다른 진화의 돌인 경우
            DisplayText("\x1D！\x04아무런 반응이 없다.");
            PlayWAV("staredit\\wav\\se_gui_choose.wav");
            return false;
        }
    }//진화도구 && 경험치조절도구
    else if(itType == 1 || itType == 10){
        imb.subItem(cp, itemIndex, 1); //아이템 1개 제거
        const preItem = mpk.item;
        mpk.item = itemIndex+1;
        s.insert(0);
        s.appendf("\x07！\x04{:s}에게 \x1D{:s}\x04을(를) 지니게 합니다.", pk.name, it.name);
        if(preItem){
            const preIt = iif.Item.cast(iif.itemList[preItem-1]);
            s.appendf("\n　\x04지니고 있던 \x1E{:s}\x04을(를) 가방에 넣었습니다.",preIt.name);
            imb.addItem(cp, preItem-1, 1, false);
        }
        PlayWAV("staredit\\wav\\emerald_pc pokemon.wav");
        s.Display();
    }
    //체력회복도구 & 음료수
    else if(itType == 5 || itType == 7){
        if(mpk.state == 0){ //기절하지 않은 포켓몬일 때
            if(ved.item_HealDelay[cp] == 0){
                var healing = it.value;
                const BTs_HP = pcm.returnStatsHP(pk.BTs);
                const IVs_HP = pcm.returnIVsHP(mpk.IVs);
                const maxHP = pcm.returnHitPoints(cp, mpk.level, BTs_HP, IVs_HP);
                if(it.index == 26){healing = maxHP;}
                if(state && bbs.pokemonNumber[cp] == pokemonSelect){
                    const curHP = bbg.pokemonCurHP[cp];
                    if(curHP != maxHP){
                        if(curHP + healing < maxHP){SetMemoryEPD(bbs.battleEPD[cp]+2, Add, healing*256);}
                        else{SetMemoryEPD(bbs.battleEPD[cp]+2, SetTo, maxHP*256);}
                    }else{
                        DisplayText("\x07！\x04포켓몬이 건강한 상태입니다.");
                        PlayWAV("staredit\\wav\\se_gui_choose.wav");
                        return false;
                    }
                }
                else{
                    if(mpk.hitpoint != maxHP){
                        if(mpk.hitpoint + healing < maxHP){mpk.hitpoint += healing;}
                        else{mpk.hitpoint = maxHP;}
                    }else{
                        DisplayText("\x07！\x04포켓몬이 건강한 상태입니다.");
                        PlayWAV("staredit\\wav\\se_gui_choose.wav");
                        return false;
                    }
                }
                s.printf("\x07！\x04{:s}의 체력이 {}만큼 회복되었습니다.",pk.name, healing);
                PlayWAV("staredit\\wav\\HP Restore.wav");
                imb.subItem(cp, itemIndex, 1); //아이템 1개 제거
                ved.item_HealDelay[cp] = 72;
            }
            else{
                s.printf("\x08！\x04재사용시간 {}초 남았습니다.", (ved.item_HealDelay[cp]/24)+1);
                PlayWAV("staredit\\wav\\se_gui_choose.wav");
            }
        }else{
            s.printf("\x08！\x04{:s}은(는) 기절상태입니다.", pk.name);
            PlayWAV("staredit\\wav\\se_gui_choose.wav");
        }
    }
    //기력회복도구
    else if(itType == 6){
        if(mpk.state == 1){ //기절상태일 때
            const BTs_HP = pcm.returnStatsHP(pk.BTs);
            const IVs_HP = pcm.returnIVsHP(mpk.IVs);
            const maxHP = pcm.returnHitPoints(cp, mpk.level, BTs_HP, IVs_HP);
            mpk.state = 0; //건강상태
            mpk.hitpoint = maxHP/it.value;
            s.printf("\x07！\x04{:s}은(는) \x17건강한 상태\x04로 회복되었습니다.",pk.name);
            PlayWAV("staredit\\wav\\HP Restore.wav");
            imb.subItem(cp, itemIndex, 1); //아이템 1개 제거
        }else{
            s.printf("\x08！\x04{:s}은(는) \x1E기절\x04한 포켓몬에게 사용할 수 있습니다.", it.name);
            PlayWAV("staredit\\wav\\se_gui_choose.wav");
        }
    }
    //영양제
    else if(itType == 9){
        //이상한 사탕
        if(it.index == 29){
            //레벨이 100이하일 때
            if(mpk.level < 100){
                //기절한 상태가 아닐때
                if(mpk.state == 0){
                    imb.subItem(cp, itemIndex, 1); //아이템 1개 제거
                    iug.subMiniMenu[cp] = 0;
                    mpk.level += 1;
                    pmp.evolvePokemon(cp, pokemonSelect, 0, 1);
                    s.printf("\x07！\x04{:s}은(는) \x1E이상한 사탕\x04을 먹고 레벨이 증가했다!",pk.name);
                    PlayWAV("staredit\\wav\\Level Up!.ogg");
                }
                else{
                    DisplayText("\x08！\x04이상한사탕은 \x1E기절하지 않은\x04 포켓몬에게 사용할 수 있습니다.");
                    PlayWAV("staredit\\wav\\se_gui_choose.wav");
                }
            }
        }
    }
    if(state){iug.subMenu[cp] = 0; iug.subMiniMenu[cp] = 0;}
    imp.pokeAction[cp] = 0;
    pps.guiUpdate[cp] = 1;
}

function item_useFunctionNoPoke(cp, bagSelect){
    const state     = pps.battleState[cp]; //0:false 1:true
    const itemIndex = imb.bagItemList[bagSelect]-1;
    const itemNum   = imb.bagNumList[bagSelect];
    const it        = iif.Item.cast(iif.itemList[itemIndex]);

    const itType = it.type;
    //몬스터볼
    if(itType == 2){
        if(bbs.isWild(bbs.battleType[cp])){
            throwBall[cp] = 1;
            throwValue[cp] = it.value;
            imb.subItem(cp, itemIndex, 1); //아이템 1개 제거
            s.appendf("\x07！\x04광휘는 \x1D{:s}\x04을 썼다!", it.name);
            PlayWAV("staredit\\wav\\emerald_ball throw.wav");
        }
        else{
            DisplayText("\x08！\x04다른 트레이너의 포켓몬에게 사용할 수 없습니다.");
            PlayWAV("staredit\\wav\\se_gui_choose.wav");
            return false;
        }
    }
    //필드도구
    else if(itType == 3){
        
    }
    //도망도구
    //도망도구는 배틀 중 도망가기를 선택하면, 자동으로 소모되게 하자.
    //그러므로, 해당 타입은 안만들어도 될 것 같음
    else if(itType == 4){

    }
    if(state){iug.subMenu[cp] = 0; iug.subMiniMenu[cp] = 0;}
    imp.pokeAction[cp] = 0;
    pps.guiUpdate[cp] = 1;
}
/*const itemType = [
    Db('진화의돌'),1,      //0 사용
    Db('진화도구'),1,      //1 지니기
    Db('몬스터볼'),2,      //2 배틀
    Db('필드도구'),1,      //3 사용
    Db('도망도구'),0,      //4 행동불가
    Db('체력회복도구'),3,   //5 사용&배틀
    Db('기력회복도구'),3,   //6 사용&배틀
    Db('음료수'),3,        //7 사용&배틀
    Db('중요한도구'),0,     //8 보관용
    Db('영양제'),1,        //9 사용
    Db('경험치조절도구'),1, //10 지니기
    Db('판매용도구'),0,    //11 판매용
];*/

function throwPoketBall(cp){
    if(throwBall[cp] == 1){
        //야생포켓몬 임시로 옮겨두기
        const cUnit = ppst.playerPokemonUnit[cp+4];
        MoveLocation(vli.npcLoc+cp, cUnit, P5, bbs.battleLocation[cp]);
        MoveUnit(1, cUnit, P5, bbs.battleLocation[cp], vli.tempLoc);

        PlayWAV("staredit\\wav\\emerald_ball throw.wav");
        addloc(vli.npcLoc+cp,0,-16);
        throwBall[cp] += 1;
    } else if(throwBall[cp] == 2){
        fc.scanEffect(vli.npcLoc+cp, 977);
        foreach(t : tl.Timeline(24)){
            if(t < 8){addloc(vli.npcLoc+cp,0,2);}
            else if(t == 8){PlayWAV("staredit\\wav\\Battle ball drop.wav");}
            else if(t == 23){throwBall[cp] += 1;}
        }
    } else if(throwBall[cp] == 3){
        fc.scanEffect(vli.npcLoc+cp, 977);
        foreach(t : tl.Timeline(36)){
            if(t == 0){PlayWAV("staredit\\wav\\Battle ball shake.wav");}
            if(t < 7){addloc(vli.npcLoc+cp,-2,0);}
            else if(t < 15){addloc(vli.npcLoc+cp,4,0);}
            else if(t < 23){addloc(vli.npcLoc+cp,-2,0);}
            if(t == 35){
                throwNum[cp] += 1;
                if(throwNum[cp] == 3){
                    const catchRate = pcm.retrunCatchRate(cp,bbg.pokemonCurHP[cp+4],bbs.pokemonHP[cp+4],throwValue[cp],bbs.battleCatch[cp]);
                    const rand = dwrand() % 256; //0~255
                    if(rand > catchRate){ //실패
                        throwBall[cp] = 0; throwNum[cp] = 0;
                        const cUnit = ppst.playerPokemonUnit[cp+4];
                        MoveUnit(1, cUnit, P5, vli.tempLoc, vli.npcLoc+cp);
                        PlayWAV("staredit\\wav\\Battle jump to ball.wav");
                    }
                }
            }
        }
        if(throwNum[cp] > 3){ //포획성공
            PlayWAV("staredit\\wav\\emerald_catch.wav");
            throwBall[cp] = 4;
            throwNum[cp] = 0;
        }
    } else if(throwBall[cp] == 4){
        throwBall[cp] = 0;
        const cUnit = ppst.playerPokemonUnit[cp+4];
        RemoveUnitAt(1, cUnit, vli.tempLoc, P5);
        const ck = pmp.myPokemon.cast(ppst.retrunPokemonList(cp, false, bbs.pokemonNumber[cp+4]));
        const pk = ppi.Pokemon1.cast(ppi.pokemonList[ck.index-1]);
        const pkn = ppi.Pokemon2.cast(pk.next);
        pmp.catchPokemon(cp, ck.index-1, bbs.pokemonLevel[cp+4], bbg.pokemonCurHP[cp+4], ck.IVs);
        bbs.battleStep[cp] = 98;
    }
}