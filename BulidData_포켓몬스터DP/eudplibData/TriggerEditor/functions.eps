import Player.playerSetting as pps;
import Variables.etcData as ved;

function SetNextUnitPTR(){
    return cunitepdread_epd(EPD(0x628438))[[0]];
}

function SetNextUnitEPD(){
    return cunitepdread_epd(EPD(0x628438))[[1]];
}

function SetNextUnit(){
    return cunitepdread_epd(EPD(0x628438));
}

function IndexToEPD(index){
    if(index == 0) {
        return 19025;
    } else {
        return 161825 - (84 * index);
    }
}

function SingleBan(){
    const a = 0x6D0F48; //방이름
    const b = 0x6D0F78; //방장닉
    const c = Db("");
    if(strcmp(a, b) == 0){
        foreach(cp : EUDLoopPlayer('Human', None, None)){
            setcurpl(cp); DisplayText("\x13\x1EUDP 플레이는 금지하고 있습니다.\n\x13\x04배틀넷에서 플레이하세요."); Defeat();
        }
    }
    else if(strcmp(b, c) == 0){
        foreach(cp : EUDLoopPlayer('Human', None, None)){
            setcurpl(cp); DisplayText("\x13\x1E싱글 플레이는 금지하고 있습니다.\n\x13\x04배틀넷에서 플레이하세요."); Defeat();
        }
    }
}


function SpeedBan(){
    const a = dwread_epd_safe(EPD(0x51CE84));
    const b = dwread_epd_safe(EPD(0x51CE88));
    if(a == 1000){if(b == 1000) return;}		//턴레이트24
    else if(a == 1042){if(b == 1190) return;}	//턴레이트20
    else if(a == 1302){if(b == 1488) return;}	//턴레이트16
    else if(a == 1488){if(b == 1701) return;}	//턴레이트14
    else if(a == 1736){if(b == 1984) return;}	//턴레이트12
    else if(a == 2083){if(b == 2381) return;}	//턴레이트10
    else if(a == 2604){if(b == 2976) return;}	//턴레이트8
    else{
        foreach(cp : EUDLoopPlayer('Human', None, None)){
            setcurpl(cp);
            DisplayText("\x13\x1E배속 플레이는 금지하고 있습니다.\n\x13\x04방제목에 있는 배속을 빼주세요.");
            Defeat();
        }
    }
}

function exitObserver(){
    for(var i=0; i<4; i++){
        if(getuserplayerid() == 128+i){
            setcurpl(getuserplayerid());
            DisplayText("  \x08■ \x04죄송합니다, 이 유즈맵은 관전을 비허용하고 있습니다.");
            EUDPlayerLoop()();
            Defeat();
            EUDEndPlayerLoop();
        }
    }
}

function ComputerCheck(player){
    if(MemoryX(0x57EEE8+ 0x24*player, Exactly, 2, 0x000000FF)){ //해당플레이어가 유저인 경우
        for(var i=0; i<8; i++){
            setcurpl(i); if(IsUserCP()){if(Memory(0x000000, Exactly, 0)){Defeat();}}
        }
    }
}

function scanEffect(targetLoc:TrgLocation, targetImage){
    SetMemoryX(0x666458, SetTo, targetImage, 0xFFFF);
    CreateUnit(1, "Scanner Sweep", targetLoc, 7);
}

function GetDeath(player, unit:TrgUnit){
    return dwread_epd(player + 12 * unit);
}

function ButtonRefresh(){
    const epd = SetNextUnitEPD();
    CreateUnit(1, 45, "Temp", 7);
    SetMemoryXEPD(epd+68, SetTo, 1, 0xFFFF);
}

function hypot(x, y){
    var t = 0;
    if(!(x >= y)){ t = x; x = y; y = t; } //Swap x, y so that y <= x
    var d = y + y - x;
    if(d >= 0x80000000) d=0;
    d += y;
    t = x + d / 5;
    return t;
}

function __GetLocCoord(loc: TrgLocation) {
    const loc_epd = loc * 5;
    DoActions(loc_epd.AddNumber(EPD(0x58DC4C)));
    const x1 = dwread_epd(loc_epd);
    DoActions(loc_epd.AddNumber(1));
    const y1 = dwread_epd(loc_epd);
    DoActions(loc_epd.AddNumber(1));
    const x2 = dwread_epd(loc_epd);
    DoActions(loc_epd.AddNumber(1));
    const y2 = dwread_epd(loc_epd);
    return x1, y1, x2, y2;
}

function LocationDistance(loc1, loc2) {
    const ox1, oy1, ox2, oy2 = __GetLocCoord(loc1);
    const dx1, dy1, dx2, dy2 = __GetLocCoord(loc2);
    const x1 = ox1 + ox2;
    const y1 = oy1 + oy2;
    const x2 = dx1 + dx2;
    const y2 = dy1 + dy2;
    var x, y;
    if(x1 > x2) x = x1 - x2;
    else x = x2 - x1;
    if(y1 > y2) y = y1 - y2;
    else y = y2 - y1;
    return hypot(x, y);
    //return sqrt((x1 - x2)*(x1 - x2)+(y1-y2)*(y1-y2)) / 2;
}

function LocationAngle(originLoc, destLoc){
    const ox1, oy1, ox2, oy2 = __GetLocCoord(originLoc);
    const dx1, dy1, dx2, dy2 = __GetLocCoord(destLoc);
    const x1 = ox1 + ox2;
    const y1 = oy1 + oy2;
    const x2 = dx1 + dx2;
    const y2 = dy1 + dy2;
    var transAngle = atan2(x2 - x1, y1 - y2);
    if(transAngle>90){transAngle -= 90;}
    else{transAngle += 270;}
    return transAngle;
}

function PolarLocation(loc: TrgLocation, length, angle){
    const x, y = lengthdir(length, angle);
    addloc(loc, x, y);
}

function BringEPD(unitEPD, location: TrgLocation) {
    MoveLocation(location, ved.junkUnit, AllPlayers, location);
    const unitType = unitEPD + 0x64/4;
    const originalUnitType = maskread_epd(unitType, 0xFFFF);
    SetMemoryXEPD(unitType, SetTo, ved.junkUnit, 0xFFFF);
    const ret = l2v(Bring(AllPlayers, AtLeast, 1, ved.junkUnit, location));
    SetMemoryXEPD(unitType, SetTo, originalUnitType, 0xFFFF);
    return ret;
}

function BuildCheckEPD(unitEPD, unit: TrgUnit) {
    unitEPD += 0x98 / 4;  // buildQueue
    if (MemoryXEPD(unitEPD, Exactly, unit, 0xFFFF)) {
        return True;
    } else {
        const mulUnit = unit * 65536;
        if (MemoryXEPD(unitEPD, Exactly, mulUnit, 0xFFFF0000)) {
            return True;
        } else {
            unitEPD += 1;
            if (MemoryXEPD(unitEPD, Exactly, unit, 0xFFFF)) {
                return True;
            } else if (MemoryXEPD(unitEPD, Exactly, mulUnit, 0xFFFF0000)) {
                return True;
            } else {
                unitEPD += 1;
                if (MemoryXEPD(unitEPD, Exactly, unit, 0xFFFF)) {
                    return True;
                }
            }
        }
    }
    return False;
}

function BuildResetEPD(unitEPD) {
    VProc(unitEPD, list(
        unitEPD.AddNumber(0x98/4),
        unitEPD.SetDest(EPD(0x6509B0)),
    ));
    setcurpl2cpcache(actions=list(
        SetDeaths(CurrentPlayer, SetTo, 0xE400E4, 0),
        SetMemory(0x6509B0, Add, 1),
        SetDeaths(CurrentPlayer, SetTo, 0xE400E4, 0),
        SetMemory(0x6509B0, Add, 1),
        SetDeathsX(CurrentPlayer, SetTo, 228, 0, 0xFFFF),
        SetMemory(0x6509B0, Add, 1),
        SetDeathsX(CurrentPlayer, SetTo, 2 << 16, 0, 0xFFFF0000),
    ));
}

function SetPColor(pnum, color){
    const pcolor_dst = 0x581D76 + 8 * pnum;
    const mcolor_dst = 0x581DD6 + pnum;
    bwrite(pcolor_dst, color);
    bwrite(mcolor_dst, color);
}

function SetUnitColorEPD(epd, color) {
    epd += 0x0C/4;
    const sprite = epdread_epd(epd);
    DoActions(sprite.AddNumber(0x0A/4));
    SetMemoryXEPD(sprite, SetTo, color * 65536, 0xFF0000);
}

function __LocOrderBase(
    epd,
    order_lsh8,
    loc: TrgLocation
) {
    const loc_epd = loc * 5;
    DoActions(loc_epd.AddNumber(EPD(0x58DC4C)));

    const x1 = dwread_epd(loc_epd);
    DoActions(loc_epd.AddNumber(1));
    const y1 = dwread_epd(loc_epd);
    DoActions(loc_epd.AddNumber(1));
    const x2 = dwread_epd(loc_epd);
    DoActions(loc_epd.AddNumber(1));
    const y2 = dwread_epd(loc_epd);

    const x = (x1 + x2) / 2;
    const y = (y1 + y2) << 15;  // = (y1 + y2) / 2 * 65536 

    epd += 0x4D / 4;
    SetMemoryXEPD(epd, SetTo, order_lsh8, 0xFF00);
    epd += (0x58 - 0x4C) / 4;
    SetMemoryEPD(epd, SetTo, y + x);
}

function COrderLocEPD(epd, order, loc: TrgLocation) {
    __LocOrderBase(epd, order << 8, loc);
}

function setLight(cp,value){
    if(IsUserCP())SetMemoryEPD(EPD(0x657A9C), SetTo, value);
}

function updateLight(cp){
    const SetLightValue = pps.userSetLight[cp];
    if(SetLightValue != 0 && pps.userLight[cp] <= SetLightValue-1){
        pps.userLight[cp] += 1;
        if(IsUserCP()){SetMemoryEPD(EPD(0x657A9C), Add, 1);}
    }
    if(pps.userLight[cp] >= SetLightValue+1){
        pps.userLight[cp] -= 1;
        if(IsUserCP()){SetMemoryEPD(EPD(0x657A9C), Subtract, 1);}
    }
}

function SelCircle(epd, sprite){
    const csprite2epdread_epd = py_eval('f_readgen_epd(0x1FFFC, (0x188002-0x58A364//4, lambda x: x//4))');
    epd += 3;
    SetMemoryXEPD(csprite2epdread_epd(epd), SetTo, sprite, 0xFFFF);
}