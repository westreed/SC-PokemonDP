import functions as fc;
import Battle.battleGUI as bbg;
import Battle.battleAttack as bba;
import Interface.menu_Book as imb;
import Interface.menu_Pokemon as imp;
import Interface.userGUI as iug;
import Player.movementUnit as pmu;
import Player.playerSetting as pps;
import Player.encounterTrainer as pet;
import Variables.locationInfo as vli;
import Variables.mainSentence as vms;
import Variables.etcData as ved;
import Pokemon.myPokemon as pmp;
import Pokemon.pokemonInfo as ppi;
import Pokemon.weakRelation as pwr;
import Pokemon.calculateMethod as pcm;
import Pokemon.pokemonStatus as ppst;
import dataTable as dT;
import BGMPlayer as BGM;

const s = StringBuffer(1024);
const battleStep    = PVariable(); //0:배틀종료 1이상:배틀시작
const nextExpStep   = PVariable();
const battleLoop    = PVariable();
const battleDelay   = PVariable(); //딜레이계산용
const battleType    = PVariable(); //0:야생 1:트레이너 2:라이벌 3:체육관장 4:갤럭시 5:갤럭시간부 6:갤럭시보스 7:디아루가펄기아 8:챔피언 9:전설 10:PVP
const battleMusic   = [ 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 10];
const battleEndMusic= [18, 19, 19, 21, 20, 20, 20, 18, 22, 18, 19];
const battleLocation= PVariable();
const battleRun     = PVariable(); //도망횟수
const battleCatch   = PVariable(); //포획률저장
const battleUser    = PVariable(); //PVP인 경우 or 트레이너배틀이면 전투중인 트레이너 index
const battleUnit    = PVariable(); //배틀상대유닛
const battleName    = PVariable(); //배틀상대이름
const battleMoney   = PVariable(); //배틀머니
const battleEXP     = PVariable(); //전투 종료후 경험치 계산
const battleEXP2    = PVariable(); //개개인의 경험치 계산량
const battleEPD     = PVariable(); //포켓몬 EPD (cp:유저 cp+4:적)
const pokemonNumber = PVariable(); //포켓몬 볼 (cp:유저 cp+4:적)(지니고 있는 볼의 몇번째 포켓몬인지)
const pokemonIndex  = PVariable(); //포켓몬 번호 (cp:유저 cp+4:적)(+1된 값임)
const pokemonName   = PVariable(); //포켓몬 이름 (cp:유저 cp+4:적)
const pokemonLevel  = PVariable(); //포켓몬 레벨 (cp:유저 cp+4:적)
const pokemonHP     = PVariable(); //포켓몬 체력 (cp:유저 cp+4:적)
const battleMap     = [0,0,0,1,1,1,1]; //battleType별로 맵지정 0:battleLoc, 1:gymLoc

const expNumber     = PVariable();
const expName       = PVariable();
const expLevel      = PVariable();


/*
5P 인페스트테란 : 내포켓몬 위치
6P 인페스트테란 : 트레이너 위치
5P 저글링 : 상대포켓몬 위치
6P 저글링 : 상대트레이너 위치
*/

function isWild(type){
    if(type == 0 || type == 7 || type == 9){return true;}
    return false;
}

function isPVP(type){
    if(type == 8){return true;}
    return false;
}

function createMyPokemon(cp, type){
    const battleMapLoc = battleLocation[cp];
    if(type){MoveLocation(vli.tempMoveLoc, 50, P5, battleMapLoc);}
    else{MoveLocation(vli.tempMoveLoc, 37, P5, battleMapLoc);}
    var cp4 = cp;
    const pokeUnit = ppst.returnPokemonUnit(cp, type);
    if(type == 0){cp4 += 4;}
    battleEPD[cp4] = fc.SetNextUnitEPD();
    if(type){CreateUnit(1, pokeUnit, vli.tempMoveLoc, cp);}
    else{CreateUnit(1, pokeUnit, vli.tempMoveLoc, P5);}
    fc.SelCircle(battleEPD[cp4], 191);

    if(type){
        //내 포켓몬의 이전체력 가져오기
        const cpPk = cp*pmp.userPokemonNum;
        const mk = pmp.myPokemon.cast(pmp.playerPokemonList[cpPk+pokemonNumber[cp]]);
        SetMemoryEPD(battleEPD[cp]+2, SetTo, mk.hitpoint*256);
    }
}

function endBattle(cp){
    RemoveUnit(ppst.playerPokemonUnit[cp], cp);
    RemoveUnit(ppst.playerPokemonUnit[cp+4], P5);
    vms.removeTextAll();
    pps.userSetLight[cp] = 0;
}

function endPokemon_SetDATA(cp, state){
    const mpk = pmp.myPokemon.cast(pmp.playerPokemonList[pokemonNumber[cp]]);
    const mpkn = pmp.myPokemon2.cast(mpk.next);
    mpkn.battle = 0; mpk.state = state;
    mpk.hitpoint = bbg.pokemonCurHP[cp];
}

function wildSetting(cp, type, pokemon, level){
    pmp.resetComputerList(cp);
    battleType[cp] = type;
    if(battleMap[type] == 0){battleLocation[cp] = vli.battleLoc+cp;}
    else{battleLocation[cp] = vli.gymLoc+cp;}

    s.printf("wildSetting  pokemon:{} level:{}",pokemon,level);

    pokemonIndex[cp+4] = pokemon;
    const pk = ppi.Pokemon1.cast(ppi.pokemonList[pokemon]);
    battleName[cp] = pk.name;
    //function setComputerData(cp, pokemon, index, lv, IV)
    pmp.setComputerData(cp, pokemon, 0, level, 0);
    battleUnit[cp] = 999;
    battleStep[cp] = 1; //Battle Start
}

function trainerSetting(cp, type, name, unit, pokemon:EUDArray){
    //pokemon은 총 길이 12로, pokemonIndex, pokemonLevel로 구성됨
    pmp.resetComputerList(cp);
    battleType[cp] = type;
    if(battleMap[type] == 0){battleLocation[cp] = vli.battleLoc+cp;}
    else{battleLocation[cp] = vli.gymLoc+cp;}

    pokemonIndex[cp+4] = pokemon[3];
    const pokemonLen = pokemon[2];
    for (var i=0; i<pokemonLen; i++){
        const j = i*2 + 3;
        pmp.setComputerData(cp, pokemon[j], i, pokemon[j+1], 0);
    }

    battleUser[cp] = pokemon[0]; //트레이너index
    battleName[cp] = name;
    battleUnit[cp] = unit;
    battleMoney[cp] = pokemon[1];
    battleStep[cp] = 1; //Battle Start
}

const startPokemon = [0,3,6];
function selectPokemon(cp, index){
    if(Deaths(cp, Exactly, 1, "A Stick")){
        if(index == 0){pps.selectMenu[cp] = 2;}
        else{pps.selectMenu[cp] -= 1;}
        PlayWAV("staredit\\wav\\GUI sel cursor.wav");
        pps.guiUpdate[cp] = 1;
    }
    if(Deaths(cp, Exactly, 2, "A Stick")){
        if(index == 2){pps.selectMenu[cp] = 0;}
        else{pps.selectMenu[cp] += 1;}
        PlayWAV("staredit\\wav\\GUI sel cursor.wav");
        pps.guiUpdate[cp] = 1;
    }
    if(Deaths(cp, Exactly, 8, "A Stick")){
        pps.selectMenu[cp] = 0;
        vms.removeText();
        pmp.catchPokemon(cp, startPokemon[index], 5, 0, ved.maxIVs);
        pps.setStartingPokemon[cp] = startPokemon[index]+1;
        PlayWAV("staredit\\wav\\se_gui_misc6.wav");
        battleStep[cp] += 1;
    }
}

function firstPokemon(cp){
    const index = pps.selectMenu[cp];
    if(pps.guiUpdate[cp]){
        pps.guiUpdate[cp] = 0;
        s.insert(0);
        s.appendf("\n\x13\x02자... 어느 것으로 할까?\n");
        s.appendf("\x13{:s}\n",vms.sph1);
        s.appendf("\x13{:s}어린잎포켓몬 모부기\n", pps.selectIcon1[index]);
        s.appendf("\x13{:s}꼬마원숭이포켓몬 불꽃숭이\n", pps.selectIcon2[index]);
        s.appendf("\x13{:s}펭귄포켓몬 팽도리\n", pps.selectIcon3[index]);
        s.appendf("\x13{:s}",vms.sph1);
    }
    s.DisplayAt(0);
    eprintf("{:s}",vms.stickText);
    selectPokemon(cp, index);
}

function battleSystem(cp){
    const step = battleStep[cp];
    //battleStep값이 1이상일 때 작동하기
    if(step){
        if(step >= 4){CenterView(battleLocation[cp]);}
        if(step >= 6 && step < 40){bbg.battleTextGUI(cp); bba.attackAI(cp);}
        //전투 시작전 필요데이터 저장하기
        if(step == 1){
            pmu.changeMoveState(cp, false);
            pps.battleState[cp] = true;
            vms.restoreMusic[cp] = pps.settingMusic[cp]; //배틀시작전 음악저장
            MoveLocation(vli.lastLoc+cp, pps.playerUnit[cp], cp, 64); //마지막 위치 저장
            pps.settingMusic[cp] = battleMusic[battleType[cp]];
            BGM.instantPlay();
            CreateUnit(1, ved.visionUnit, battleLocation[cp], cp); //시야 생성
            battleEXP[cp] = 0;
            imp.pokeChange[cp] = 0;
            battleStep[cp] += 1;
            SetAllianceStatus(P5, Enemy);
        }
        //전투 시작전 화면 깜박이기
        else if(step == 2){
            CenterView(vli.moveLoc+cp);
            if(battleDelay[cp] <= 18){
                battleDelay[cp] += 1;
                if(battleDelay[cp] == 1){fc.setLight(cp, 31);}
                else if(battleDelay[cp] == 10){fc.setLight(cp, 0);}
            }
            else{ battleDelay[cp] = 0; battleLoop[cp] += 1;}
            if(battleLoop[cp] == 4){
                SetDeaths(cp, SetTo, 31, "A LightDelay");
                battleLoop[cp] = 0; battleStep[cp] += 1; pps.guiUpdate[cp] = 1;
            }
        }
        //첫포켓몬 선택을 안한 경우, 포켓몬 선택하기
        else if(step == 3){
            if(pps.mainStory[cp] == 9){firstPokemon(cp);}
            else{battleStep[cp] += 1;}
        }
        //컴퓨터 포켓몬 세팅하기
        else if(step == 4){
            //화면 밝기 31로
            pps.userSetLight[cp] = 31; pps.userLight[cp] = 0;

            //컴퓨터 포켓몬 설정
            const cUnit = ppst.settingPokemon(cp, false, 0); //컴퓨터 포켓몬 세팅
            pokemonNumber[cp+4] = 0;

            //내 포켓몬 설정
            const pkNumber = pmp.returnPlayerIndex(cp);
            pokemonNumber[cp] = pkNumber;
            const pUnit = ppst.settingPokemon(cp, true, pkNumber);

            const pk = ppi.Pokemon1.cast(ppi.pokemonList[pokemonIndex[cp]-1]);
            const ck = ppi.Pokemon1.cast(ppi.pokemonList[pokemonIndex[cp+4]-1]);
            pwr.calculateWeak_PVE(cp, pk.type, ck.type);

            //유닛 배치하기
            const battleMapLoc = battleLocation[cp];
            createMyPokemon(cp, true); //내 포켓몬
            fc.scanEffect(vli.tempMoveLoc, 391);
            MoveLocation(vli.tempMoveLoc, 50, P6, battleMapLoc); //내 트레이너
            MoveUnit(1, pps.playerUnit[cp], cp, 64, vli.tempMoveLoc);
            createMyPokemon(cp, false); //상대 포켓몬
            if(!isWild(battleType[cp])){fc.scanEffect(vli.tempMoveLoc, 391);}
            
            //트레이너가 있는 경우
            if(battleUnit[cp] != 999){
                MoveLocation(vli.tempMoveLoc, 37, P6, battleMapLoc); //상대 트레이너
                CreateUnit(1, battleUnit[cp], vli.tempMoveLoc, P5);
                SetInvincibility(Enable, battleUnit[cp], P5, battleMapLoc);
            }

            //학습장치가 있는 포켓몬에게 battle 값 올려주기
            pmp.joinLearningDevicePokemon(cp);
            battleStep[cp] += 1;
        }
        else if(step == 5){
            //야생 전투인 경우
            if(isWild(battleType[cp])){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x04앗! \x1E야생 {:s}\x04이(가) 튀어나왔다!\n",pokemonName[cp+4]);
                s.appendf("\x13\x04가랏! \x17{:s}\x04!\n",pokemonName[cp]);
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
                battleDelay[cp] += 1;
                if(battleDelay[cp] > 24*2){
                    battleDelay[cp] = 0;
                    PlayWAV("staredit\\wav\\GUI sel cursor.wav");
                    battleStep[cp] += 1;
                }
            }
            //사람과의 전투인 경우
            else{
                battleDelay[cp] += 1;
                if(battleDelay[cp] < 24*2){
                    s.insert(0, "\n\n\n");
                    s.appendf("\x13{:s}\n",vms.sph1);
                    s.appendf("\x13\x17{:s}\x04(이)가\n",battleName[cp]);
                    s.appendf("\x13\x04승부를 걸어왔다!\n");
                    s.appendf("\x13{:s}",vms.sph1);
                    s.DisplayAt(0);
                }
                else if(battleDelay[cp] < 24*4){
                    s.insert(0, "\n\n\n");
                    s.appendf("\x13{:s}\n",vms.sph1);
                    s.appendf("\x13\x17{:s}\x04(은)는\n",battleName[cp]);
                    s.appendf("\x13\x1E{:s}\x04(을)를 내보냈다!\n",pokemonName[cp+4]);
                    s.appendf("\x13{:s}",vms.sph1);
                    s.DisplayAt(0);
                }
                else{
                    battleDelay[cp] = 0;
                    battleStep[cp] += 1;
                }
            }
        }
        //전투 중
        else if(step == 6){
            //내 포켓몬이 진 경우
            if(bbg.pokemonCurHP[cp] == 0){
                //포켓몬 교체 중에 내 포켓몬이 진 경우, 교체 초기화하기
                if(imp.pokeChange[cp]){imp.pokeChange[cp] = 0;}

                const cpPk = pmp.userPokemonNum*cp;
                const mpk = pmp.myPokemon.cast(pmp.playerPokemonList[cpPk+pokemonNumber[cp]]);
                const mpkn = pmp.myPokemon2.cast(mpk.next);
                //기절부여 및 배틀상태 제거
                mpk.state = 1; mpk.hitpoint = 0; mpkn.battle = 0;
                //메뉴 종료
                iug.subMenu[cp] = 0; iug.subMiniMenu[cp] = 0;

                //내가 낼 수 있는 포켓몬이 존재하는지
                const nextPokemon = pmp.returnPlayerIndex(cp);
                //있는 경우 포켓몬 내보내기 메뉴 활성화
                if(nextPokemon != 10){battleStep[cp] = 10; pps.guiUpdate[cp] = 1;}
                else{
                    if(isWild(battleType[cp])){battleStep[cp] = 50;} //배틀종료
                    else{battleStep[cp] = 49;} //트레이너와의 배틀종료
                    endBattle(cp);
                }
                // imb.writeSinoBook(cp, pokemonIndex[cp+4]-1);
            }
            //상대 포켓몬이 진 경우
            if(bbg.pokemonCurHP[cp+4] == 0){
                const cp6 = cp*6;
                const cpk = pmp.myPokemon.cast(pmp.computerPokemonList[cp6+pokemonNumber[cp+4]]);
                const pk = ppi.Pokemon1.cast(ppi.pokemonList[cpk.index-1]);
                cpk.state = 1; //기절상태
                //type:야생?트레이너? exp:개체경험치 level:상대레벨
                battleEXP[cp] += pcm.returnEXP(isWild(battleType[cp]), pk.exp, pokemonLevel[cp+4]);
                const nextPokemon = pmp.returnComputerIndex(cp);
                if(nextPokemon != 10){battleStep[cp] = 41;}
                else{
                    const mpk = pmp.myPokemon.cast(pmp.playerPokemonList[pokemonNumber[cp]]);
                    mpk.hitpoint = bbg.pokemonCurHP[cp];
                    if(isWild(battleType[cp])){battleStep[cp] = 51;} //배틀종료
                    else{battleStep[cp] = 52;} //배틀종료
                    pps.settingMusic[cp] = battleEndMusic[battleType[cp]];
                    BGM.instantPlay();
                    endBattle(cp);
                }
                imb.writeSinoBook(cp, pokemonIndex[cp+4]-1);
            }
        }
        //내 포켓몬 중 누구를 내보낼 것인가
        else if(step == 10){
            imp.subMenu_Pokemon(cp, 0, 2);
        }
        //컴퓨터는 다음 포켓몬 내보내기1
        else if(step == 41){
            battleDelay[cp] ++;
            if(battleDelay[cp] < 24*2){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x04상대 \x1E{:s}\x04(은)는 쓰러졌다!\n",pokemonName[cp+4]);
                s.appendf("\x13\n");
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else{
                battleDelay[cp] = 0;
                nextExpStep[cp] = 42;
                battleStep[cp] = 90;
            }
        }
        //컴퓨터는 다음 포켓몬 내보내기2
        else if(step == 42){
            battleDelay[cp] ++;
            if(battleDelay[cp] == 1){
                const nextPokemon = pmp.returnComputerIndex(cp);
                pokemonNumber[cp+4] = nextPokemon;
                const pUnit = ppst.settingPokemon(cp, false, nextPokemon);

                const pk = ppi.Pokemon1.cast(ppi.pokemonList[pokemonIndex[cp]-1]);
                const ck = ppi.Pokemon1.cast(ppi.pokemonList[pokemonIndex[cp+4]-1]);
                pwr.calculateWeak_PVE(cp, pk.type, ck.type);

            }
            if(battleDelay[cp] < 24*2){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x17{:s}\x04(은)는\n",battleName[cp]);
                s.appendf("\x13\x1E{:s}\x04(을)를 내보냈다!\n", pokemonName[cp+4]);
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else{
                createMyPokemon(cp, false); //상대 포켓몬 생성
                fc.scanEffect(vli.tempMoveLoc, 391);
                PlayWAV("staredit\\wav\\Battle recall.wav");
                battleDelay[cp] = 0;
                battleStep[cp] = 6; //전투로 복귀
            }
        }
        //플레이어 패배 (야생이 아닌 경우)
        else if(step == 49){
            battleDelay[cp] += 1;
            if(battleDelay[cp] < 24*2){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x04광휘에게는\n");
                s.appendf("\x13\x04싸울 수 있는 포켓몬이 없다!\n");
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else if(battleDelay[cp] < 24*4){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x04광휘는 당황해서\n");
                s.appendf("\x13\x040원을 잃어버렸다!\n"); //나중에 잃어버리는 돈 함수 제작하기
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else if(battleDelay[cp] < 24*6){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x04... ... ... ...\n\n");
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else if(battleDelay[cp] < 24*8){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x04광휘는\n");
                s.appendf("\x13\x04눈앞이 캄캄해졌다!\n");
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else{battleStep[cp] = 99;}
        }
        //플레이어 패배 (야생)
        else if(step == 50){
            battleDelay[cp] += 1;
            if(battleDelay[cp] < 24*2){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x04광휘에게는\n");
                s.appendf("\x13\x04싸울 수 있는 포켓몬이 없다!\n");
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else if(battleDelay[cp] < 24*4){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x04광휘는 당황해서\n");
                s.appendf("\x13\x040원을 잃어버렸다!\n"); //나중에 잃어버리는 돈 함수 제작하기
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else if(battleDelay[cp] < 24*6){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x04... ... ... ...\n\n");
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else if(battleDelay[cp] < 24*8){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x04광휘는\n");
                s.appendf("\x13\x04눈앞이 캄캄해졌다!\n");
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else{battleStep[cp] = 99;}
        }
        //야생포켓몬의 패배
        else if(step == 51){
            battleDelay[cp] += 1;
            if(battleDelay[cp] < 24*2){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x1E야생 {:s}\x04은(는) 쓰러졌다!\n\n",pokemonName[cp+4]);
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else{
                battleDelay[cp] = 0;
                nextExpStep[cp] = 100;
                battleStep[cp] = 90;
            }
        }
        //트레이너의 패배
        else if(step == 52){
            battleDelay[cp] += 1;
            if(battleDelay[cp] < 24*2){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x17{:s}\x04와의\n",battleName[cp]);
                s.appendf("\x13\x04승부에서 이겼다!\n");
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else if(battleDelay[cp] < 24*4){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x04광휘는 상금으로\n");
                s.appendf("\x13\x1F{}원\x04을 손에 넣었다!\n", battleMoney[cp]);
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else{
                SetResources(cp, Add, battleMoney[cp], Ore);
                battleDelay[cp] = 0;
                nextExpStep[cp] = 100;
                battleStep[cp] = 90;
            }
        }
        //도망치기
        else if(step == 53){
            const mpk = pmp.myPokemon.cast(pmp.playerPokemonList[pokemonNumber[cp]]);
            const mpkn = pmp.myPokemon2.cast(mpk.next);
            mpkn.battle = 0; mpk.hitpoint = bbg.pokemonCurHP[cp];
            PlayWAV("staredit\\wav\\Battle flee.wav");
            endBattle(cp);
            battleStep[cp] = 54;
        }
        else if(step == 54){
            battleDelay[cp] += 1;
            if(battleDelay[cp] < 24*4){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x04광휘는\n");
                s.appendf("\x13\x1E야생 {:s}\x04(으)로부터 도망쳤다!\n",pokemonName[cp+4]);
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else{
                battleDelay[cp] = 0;
                battleStep[cp] = 100;
            }
        }
        //경험치 분배하기
        else if(step == 90){
            //배틀에 참여한 포켓몬 수
            const num = pmp.returnJoinBattle(cp);
            battleEXP[cp] = battleEXP[cp]/num;
            battleStep[cp] = 91;
        }
        else if(step == 91){
            if(pmp.evoIng[cp] == 0){
                battleDelay[cp] += 1;
                if(battleDelay[cp] == 1){
                    const cpPk = cp*pmp.userPokemonNum;
                    for(var i=0; i<6; i++){
                        const mpk = pmp.myPokemon.cast(pmp.playerPokemonList[cpPk+i]);
                        const mpkn = pmp.myPokemon2.cast(mpk.next);
                        if(mpk.index > 0 && mpkn.battle == 1){
                            const pk = ppi.Pokemon1.cast(ppi.pokemonList[mpk.index-1]);
                            mpkn.battle = 0;
                            //행복의 알을 지닌 경우
                            if(mpk.item == 35+1){battleEXP2[cp] = (battleEXP[cp])*3/2;}
                            //행복의 알이 없는 경우
                            else{battleEXP2[cp] = battleEXP[cp];}
                            mpk.ownEXP += battleEXP2[cp];
                            expName[cp] = pk.name;
                            expNumber[cp] = i;
                            expLevel[cp] = mpk.level;
                            PlayWAV("staredit\\wav\\emerald_exp gain.wav");
                            return;
                        }
                    }
                    //전투 중에 경험치 분배일 때, 전장에 나와있는 포켓몬인 경우
                    if(nextExpStep[cp] != 100){
                        //배틀정보를 초기화하지 않음
                        const cpPk = cp*pmp.userPokemonNum;
                        const mpk = pmp.myPokemon.cast(pmp.playerPokemonList[cpPk+pokemonNumber[cp]]);
                        const mpkn = pmp.myPokemon2.cast(mpk.next);
                        mpkn.battle = 1;
                    }
                    battleEXP[cp] = 0; //경험치 초기화
                    battleDelay[cp] = 0;
                    battleStep[cp] = nextExpStep[cp];
                }
                else if(battleDelay[cp] < 24*3){
                    s.insert(0, "\n\n\n");
                    s.appendf("\x13{:s}\n",vms.sph1);
                    s.appendf("\x13\x17{:s}\x04은(는)\n",expName[cp]);
                    s.appendf("\x13\x1E{} 경험치\x04를 얻었다!\n",battleEXP2[cp]);
                    s.appendf("\x13{:s}",vms.sph1);
                    s.DisplayAt(0);
                }
                else if(battleDelay[cp] < 24*6){
                    if(battleDelay[cp] == 24*3){
                        const levelup = pmp.levelupPokemon(cp, expNumber[cp]);
                        if(levelup){PlayWAV("staredit\\wav\\Level Up!.ogg");}
                        else{battleDelay[cp] = 0;}
                    }
                    else{
                        s.insert(0, "\n\n\n");
                        s.appendf("\x13{:s}\n",vms.sph1);
                        s.appendf("\x13\x17{:s}\x04은(는)\n",expName[cp]);
                        s.appendf("\x13\x1C레벨{}\x04로 올랐다!\n",expLevel[cp]+1);
                        s.appendf("\x13{:s}",vms.sph1);
                        s.DisplayAt(0);
                    }
                }
                else{ //진화조건을 만족한 경우
                    if(!pmp.evolvePokemon(cp, expNumber[cp], 0, 1)){battleDelay[cp] = 0;}
                }
            }
        }
        //포켓몬 포획
        else if(step == 98){
            battleDelay[cp] += 1;
            if(battleDelay[cp] == 1){
                pps.userSetLight[cp] = 0;
                vms.removeTextAll();
                pps.settingMusic[cp] = 26;
                BGM.instantPlay();
                const mpk = pmp.myPokemon.cast(pmp.playerPokemonList[pokemonNumber[cp]]);
                mpk.hitpoint = bbg.pokemonCurHP[cp];
                RemoveUnit(ppst.playerPokemonUnit[cp], cp);
                imb.writeSinoBook(cp, pokemonIndex[cp+4]-1);
                pmp.resetPokemonBattleData(cp);
            }
            else if(battleDelay[cp] < 24*7){
                s.insert(0, "\n\n\n");
                s.appendf("\x13{:s}\n",vms.sph1);
                s.appendf("\x13\x04신난다-!\n");
                s.appendf("\x13\x1E{:s}\x04을(를) 붙잡았다!\n",pokemonName[cp+4]);
                s.appendf("\x13{:s}",vms.sph1);
                s.DisplayAt(0);
            }
            else{battleStep[cp] = 100;}
        }
        //배틀종료 후 원래자리로 복귀 (패배)
        else if(step == 99){
            const lastHeal = pps.lastVisitHeal[cp];
            const mapType1 = vli.mapType[lastHeal];
            //포켓몬센터가 있는 마을이나 도시인 경우
            if(mapType1 == 2 || mapType1 == 3){
                MoveLocation(vli.lastLoc+cp, 46, P5, vli.mapLoc[10]);
                pps.currentLocation[cp] = 10;
                pps.settingMusic[cp] = vli.mapMusic[10];
            }
            //포켓몬센터가 없는 장소인 경우 (P5 디파일러에게 이동)
            else{
                MoveLocation(vli.lastLoc+cp, 46, P5, vli.mapLoc[lastHeal]);
                pps.currentLocation[cp] = lastHeal;
                pps.settingMusic[cp] = vli.mapMusic[lastHeal];
            }
            MoveUnit(1, pps.playerUnit[cp], cp, 64, vli.lastLoc+cp);
            pps.forceSpeech[cp] = 1;
            CenterView(vli.lastLoc+cp);
            battleStep[cp] = 101;
        }
        //배틀종료 후 원래자리로 복귀
        else if(step == 100){
            const lastL = vli.lastLoc+cp;
            MoveUnit(1, pps.playerUnit[cp], cp, 64, lastL);
            if(battleMoney[cp]){
                battleMoney[cp] = 0;
                pps.settingMusic[cp] = vli.mapMusic[pps.currentLocation[cp]];
                const cpSb = cp*pet.subNum;
                pet.subList[cpSb+battleUser[cp]] = 1;
            }
            else{pps.settingMusic[cp] = vms.restoreMusic[cp];}
            CenterView(lastL);
            pmu.changeMoveState(cp, true);
            battleStep[cp] = 101;
        }
        else if(step == 101){
            SetAllianceStatus(P5, Ally);
            RemoveUnit(ved.visionUnit, cp);
            RemoveUnitAt(1, battleUnit[cp], battleLocation[cp], P5);
            pps.userSetLight[cp] = 31;
            pps.battleState[cp] = false;
            battleStep[cp] = 0;
            vms.removeTextAll();
            if(pps.mainStory[cp] == 9){pps.mainStory[cp] += 1;}
        }
    }
}