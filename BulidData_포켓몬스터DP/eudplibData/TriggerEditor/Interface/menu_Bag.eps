import Battle.battleStart as bbs;
import Interface.userGUI as iug;
import Interface.menu_Pokemon as imp;
import Item.itemInfo as iif;
import Item.itemUse as iiu;
import Player.playerSetting as pps;
import Variables.mainSentence as vms;


const s = StringBuffer(1024);
const t = StringBuffer(1024);
const bagMax        = 18;
const bagLastPage   = bagMax/6 - 1;
const bagItemList   = EUDArray(4*bagMax);
const bagNumList    = EUDArray(4*bagMax);
const bagIndex      = PVariable();
const bagPage       = PVariable();
const bagType       = PVariable(); //아이템의 타입


function subMenu_BagAction(cp, index);
function subMenu_BagInfo(cp, height);
function subMenu_BagInfoAction(cp);
function subMenu_ItemUseAction(cp);
function subMenu_Book(cp, height){
    if(iug.subMiniMenu[cp] == 0){
        const index = bagIndex[cp];
        if(pps.guiUpdate[cp]){
            pps.guiUpdate[cp] = 0;
            const cpBag = cp*bagMax;
            const page = 6*bagPage[cp];
            const cpPage = cpBag+page;
            t.insert(0);
            t.appendf("\t\t\x1D가방 \x1E({}/{})\n\n",bagPage[cp]+1,bagLastPage+1);

            for(var i=0; i<6; i++){
                const icon = EUDArray.cast(pps.selectIconList[i]);
                if(bagItemList[cpPage+i]){
                    const item = iif.Item.cast(iif.itemList[bagItemList[cpPage+i]-1]);
                    t.appendf("\t\t{:s}\x04{:s} \x1E({})\n",icon[index],item.name, bagNumList[cpPage+i]);
                }else{t.appendf("\t\t{:s}\x04없음\n",icon[index]);}
            }

        }
        t.DisplayAt(height);
        eprintf("{:s}",vms.stickText3);
        subMenu_BagAction(cp, index);
    }
    else{
        //아이템 정보 보기
        if(imp.pokeAction[cp] == 0){
            subMenu_BagInfo(cp, height);
            subMenu_BagInfoAction(cp);
        }
        else{
            //아이템 사용
            imp.subMenu_Pokemon(cp, height, 0);
            subMenu_ItemUseAction(cp);
        }
        eprintf("{:s}",vms.stickText4);
    }
}

function nextPage(cp, value){
    if(value){ //1, true 페이지 증가
        if(bagPage[cp] < bagLastPage){bagPage[cp] += 1;}
        else{bagPage[cp] = 0;}
    }
    else{ //0, false 페이지 감소
        if(bagPage[cp] > 0){bagPage[cp] -= 1;}
        else{bagPage[cp] = bagLastPage;}
    }
}

function subMenu_BagAction(cp, index){
    if(Deaths(cp, Exactly, 1, "A Stick")){
        if(index == 0){bagIndex[cp] = 5; nextPage(cp, 0);}
        else{bagIndex[cp] -= 1;}
        PlayWAV("staredit\\wav\\GUI sel cursor.wav");
        pps.guiUpdate[cp] = 1;
    }
    if(Deaths(cp, Exactly, 2, "A Stick")){
        if(index == 5){bagIndex[cp] = 0; nextPage(cp, 1);}
        else{bagIndex[cp] += 1;}
        PlayWAV("staredit\\wav\\GUI sel cursor.wav");
        pps.guiUpdate[cp] = 1;
    }
    if(Deaths(cp, Exactly, 16, "A Stick")){ //PageUp
        bagIndex[cp] = 5; nextPage(cp, 0);
        PlayWAV("staredit\\wav\\GUI sel cursor.wav");
        pps.guiUpdate[cp] = 1;
    }
    if(Deaths(cp, Exactly, 32, "A Stick")){ //PageDown
        bagIndex[cp] = 0; nextPage(cp, 1);
        PlayWAV("staredit\\wav\\GUI sel cursor.wav");
        pps.guiUpdate[cp] = 1;
    }
    //뒤로가기
    if(Deaths(cp, Exactly, 4, "A Stick")){
        iug.subMenu[cp] = 0;
        pps.guiUpdate[cp] = 1;
        PlayWAV("staredit\\wav\\se_gui_misc6.wav");
    }
    //결정
    if(Deaths(cp, Exactly, 8, "A Stick")){
        const cpBag = cp*bagMax;
        const page = 6*bagPage[cp];
        const cpPage = cpBag+page+bagIndex[cp];
        if(bagItemList[cpPage]){
            iug.subMiniMenu[cp] = cpPage+1;
            pps.guiUpdate[cp] = 1;
            PlayWAV("staredit\\wav\\se_gui_misc6.wav");
        }
    }
}

function subMenu_BagInfo(cp, height){
    if(pps.guiUpdate[cp]){
        pps.guiUpdate[cp] = 0;
        const select = iug.subMiniMenu[cp]-1;
        const itemIndex = bagItemList[select]-1;
        const itemNum   = bagNumList[select];
        const it = iif.Item.cast(iif.itemList[itemIndex]);
        bagType[cp] = it.type;

        t.insert(0);
        t.appendf("\t\t\x1D{:s} \x1E({}개 보유)\n\n",it.name, itemNum);
        t.appendf("\t\t\x04{:s}\n\n",it.text);
        t.appendf("\t\t\x04타입 : {:s}\n",iif.itemTypeText[it.type]);
        if(pps.battleState[cp]){
            if(iiu.isBattleType(bagType[cp], bbs.battleType[cp])){t.appendf("\t\t\x17사용하기 (D)\n");}
            else{t.appendf("\t\t\x1E사용하기 (D)\n");}
        }else{
            if(iiu.isBagType(bagType[cp])){t.appendf("\t\t\x17사용하기 (D)\n");}
            else{t.appendf("\t\t\x1E사용하기 (D)\n");}
        }
        t.appendf("\t\t\x1E뒤로가기 (A)");
    }
    t.DisplayAt(height);
}

function subMenu_BagInfoAction(cp){
    //뒤로가기
    if(Deaths(cp, Exactly, 4, "A Stick")){
        iug.subMiniMenu[cp] = 0;
        pps.guiUpdate[cp] = 1;
        PlayWAV("staredit\\wav\\se_gui_misc5.wav");
    }
    //사용하기
    if(Deaths(cp, Exactly, 8, "A Stick")){
        if(pps.battleState[cp]){
            if(iiu.isBagType(bagType[cp])){
                DisplayText("\x08！\x04사용할 수 없는 아이템입니다.");
                PlayWAV("staredit\\wav\\se_gui_choose.wav");
            }
            else{
                if(iiu.isPokemonItem(bagType[cp])){
                    imp.pokeAction[cp] = 1;
                    PlayWAV("staredit\\wav\\se_gui_misc6.wav");
                }
                //포켓몬 메뉴를 안거치는 타입
                else{
                    const select = iug.subMiniMenu[cp]-1;
                    iiu.item_useFunctionNoPoke(cp, select);
                }
                pps.guiUpdate[cp] = 1;
            }
        }
        else{
            if(iiu.isBattleType(bagType[cp], bbs.battleType[cp])){
                DisplayText("\x08！\x04사용할 수 없는 아이템입니다.");
                PlayWAV("staredit\\wav\\se_gui_choose.wav");
            }
            //포켓몬 메뉴를 안거치는 타입
            else{
                if(iiu.isPokemonItem(bagType[cp])){
                    imp.pokeAction[cp] = 1;
                    PlayWAV("staredit\\wav\\se_gui_misc6.wav");
                }
                //포켓몬 메뉴를 안거치는 타입
                else{
                    const select = iug.subMiniMenu[cp]-1;
                    iiu.item_useFunctionNoPoke(cp, select);
                }
                pps.guiUpdate[cp] = 1;
            }
        }
    }
}

function subMenu_ItemUseAction(cp){
    const index = imp.pokeIndex[cp];
    if(Deaths(cp, Exactly, 1, "A Stick")){
        if(index == 0){imp.pokeIndex[cp] = 5;}
        else{imp.pokeIndex[cp] -= 1;}
        PlayWAV("staredit\\wav\\GUI sel cursor.wav");
        pps.guiUpdate[cp] = 1;
    }
    if(Deaths(cp, Exactly, 2, "A Stick")){
        if(index == 5){imp.pokeIndex[cp] = 0;}
        else{imp.pokeIndex[cp] += 1;}
        PlayWAV("staredit\\wav\\GUI sel cursor.wav");
        pps.guiUpdate[cp] = 1;
    }
    //뒤로가기
    if(Deaths(cp, Exactly, 4, "A Stick")){
        imp.pokeAction[cp] = 0;
        pps.guiUpdate[cp] = 1;
        PlayWAV("staredit\\wav\\se_gui_misc5.wav");
    }
    //아이템 사용 & 지니기
    if(Deaths(cp, Exactly, 8, "A Stick")){
        const select = iug.subMiniMenu[cp]-1;
        iiu.item_useFunction(cp, select, index);
    }
}

function sortBag(cp){
    const cpBag = cp*bagMax;
    for(var i=0; i < bagMax; i++){
        for(var j=1; j < bagMax; j++){
            if(MemoryEPD(EPD(bagItemList)+cpBag+j, AtLeast, 1) && MemoryEPD(EPD(bagItemList)+cpBag+j-1, Exactly, 0)){
                bagItemList[cpBag+j-1] = bagItemList[cpBag+j];
                bagNumList[cpBag+j-1] = bagNumList[cpBag+j];
                bagItemList[cpBag+j] = 0;
                bagNumList[cpBag+j] = 0;
            }
        }
    }
}

function addItem(cp, item, num, text){
    const cpBag = cp*bagMax;
    var blankIndex = bagMax+1;
    for(var i=0; i<bagMax; i++){
        //같은 아이템이 가방에 있는 경우
        if(MemoryEPD(EPD(bagItemList)+cpBag+i, Exactly, item+1)){
            bagNumList[cpBag+i] += num;
            const item = iif.Item.cast(iif.itemList[item]);
            if(text){
                s.printf("\x07！\x04{:s}을(를) 손에 넣었다!",item.name);
                PlayWAV("staredit\\wav\\ObtainedanItem.wav");
            }
            return;
        }
        //같은 아이템이 없는 경우를 대비해서 빈공간도 수색하기
        if(blankIndex == bagMax+1 && MemoryEPD(EPD(bagItemList)+cpBag+i, Exactly, 0)){
            blankIndex = i;
        }
    }
    //같은 아이템이 없는 경우
    if(blankIndex == bagMax+1){
        //빈 공간이 없음
        DisplayText("\x08！\x04가방에 공간이 없습니다.");
    }
    else{
        bagItemList[cpBag+blankIndex] = item+1; //아이템값이 0부터 시작함.
        bagNumList[cpBag+blankIndex] = num;
        const item = iif.Item.cast(iif.itemList[item]);
        if(text){
            s.printf("\x07！\x04{:s}을(를) 손에 넣었다!",item.name);
            PlayWAV("staredit\\wav\\ObtainedanItem.wav");
        }
    }
}

function subItem(cp, item, num){
    const cpBag = cp*bagMax;
    for(var i=0; i<bagMax; i++){
        //빼고자 하는 아이템인 경우
        if(MemoryEPD(EPD(bagItemList)+cpBag+i, Exactly, item+1)){
            if(MemoryEPD(EPD(bagNumList)+cpBag+i, AtLeast, num+1)){
                bagNumList[cpBag+i] -= num;
            }else{
                bagItemList[cpBag+i] = 0;
                bagNumList[cpBag+i] = 0;
                iug.subMiniMenu[cp] = 0; //열린 서브메뉴 닫기
                sortBag(cp); //인벤정렬
            }
            return;
        }
    }
}